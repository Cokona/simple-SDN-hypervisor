from ryu.lib.packet import packet, openflow
# fromryu.ofproto.ofproto_v1_3_parser
import array

# https://ryu.readthedocs.io/en/latest/library_packet_ref/packet_openflow.html
# https://ryu.readthedocs.io/en/latest/library_packet_ref.html
# https://ryu.readthedocs.io/en/latest/library_packet.html

# Hello
# data = b"\x04\x00\x00\x08\x00\x00\x00\x4d"
#
# Features Request  ************************ DOES NOT PARSE
# data = b"\x04\x05\x00\x08\xe6\x4b\xe3\x59"
#
# Flow Mod
# data = b"\x04\x0e\x00\x50\x40\x9b\x4d\x86\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x04\x00\x00\x00\x00\x00\x04\x00\x18\x00\x00\x00\x00\x00\x00\x00\x10\xff\xff\xff\xfd\xff\xff\x00\x00\x00\x00\x00\x00"
#
# PacketIN
# data = b"\x04\x0a\x00\x84\x00\x00\x00\x00\x00\x00\x01\x00\x00\x5a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x0c\x80\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x33\x33\x00\x00\x00\x16\x22\xb5\x46\x38\xec\xb3\x86\xdd\x60\x00\x00\x00\x00\x24\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x3a\x00\x05\x02\x00\x00\x01\x00\x8f\x00\x82\x9e\x00\x00\x00\x01\x04\x00\x00\x00\xff\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\x38\xec\xb3"
#
# ERROR of double sending
# data = b"\x04\x0a\x00\x84\x00\x00\x00\x00\x00\x00\x01\x25\x00\x5a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x0c\x80\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x33\x33\x00\x00\x00\x16\xaa\xaa\xaa\xaa\xaa\x03\x86\xdd\x60\x00\x00\x00\x00\x24\x00\x01\xfe\x80\x00\x00\x00\x00\x00\x00\xa8\xaa\xaa\xff\xfe\xaa\xaa\x03\xff\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x3a\x00\x05\x02\x00\x00\x01\x00\x8f\x00\xca\x02\x00\x00\x00\x01\x04\x00\x00\x00\xff\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xaa\xaa\x03\x04\x01\x00\x34\xc8\xdf\x27\xf3\x00\x01\x00\x07\x04\x0d\x00\x28\xc8\xdf\x27\xf3\x00\x00\x01\x24\x00\x00\x00\x02\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\xff\xff\xff\xfb\xff\xe5\x00\x00\x00\x00\x00\x00"
#
# Error for two PING packet_outs
data = b"\x04\x0a\x00\x54\x00\x00\x00\x00\x00\x00\x01\x40\x00\x2a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x0c\x80\x00\x00\x04\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\xaa\xaa\xaa\xaa\xaa\x02\xaa\xaa\xaa\xaa\xaa\x04\x08\x06\x00\x01\x08\x00\x06\x04\x00\x02\xaa\xaa\xaa\xaa\xaa\x04\x14\x00\x00\x04\xaa\xaa\xaa\xaa\xaa\x02\x14\x00\x00\x02\x04\x01\x00\x34\xc8\xdf\x28\x0e\x00\x01\x00\x07\x04\x0d\x00\x28\xc8\xdf\x28\x0e\x00\x00\x01\x3f\x00\x00\x00\x01\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\xff\xff\xff\xfb\xff\xe5\x00\x00\x00\x00\x00\x00"
#
# Port status when closing mn
# data = b"\x04\x0c\x00\x50\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\xea\xa9\xb6\x92\xc6\xe1\x00\x00\x73\x31\x2d\x65\x74\x68\x33\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x98\x96\x80\x00\x00\x00\x00"
#
# PACKET IN of ping message
# data = b"\x04\x0a\x00\x54\x00\x00\x00\x00\x00\x00\x01\x3f\x00\x2a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x0c\x80\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\xaa\xaa\xaa\xaa\xaa\x02\xaa\xaa\xaa\xaa\xaa\x04\x08\x06\x00\x01\x08\x00\x06\x04\x00\x02\xaa\xaa\xaa\xaa\xaa\x04\x14\x00\x00\x04\xaa\xaa\xaa\xaa\xaa\x02\x14\x00\x00\x02"


method_openflow_parser = True
method_packet_parser = False

if method_openflow_parser:
    msg = openflow.openflow.parser(data)
    # msg[0].msg ----> dict_keys(['datapath', 'version', 'msg_type', 'msg_len', 'xid', 'buf', 'buffer_id', 'total_len', 'reason', 'table_id', 'cookie', 'match', 'data'])

    msg_type_macro = msg[0].msg.msg_type        # This is a number that corresponds to the macro
                                                # We should create a dict to crosscheck
    msg_type_string = type(msg[0].msg)             # class 'ryu.ofproto.ofproto_v1_3_parser.OFPPacketIn'

    #msg_reason = msg[0].msg.reason

    print("The msg_type as a macro is {}".format(msg_type_macro))    # 10
    print("The string msg_type is {} and it has these attr: {}".format(msg_type_string, msg[0].msg.__dict__.keys()))

    try:
        msg_data = packet.Packet(msg[0].msg.data)
    except:
        msg_data = None
        print("Message has no msg.data")


    try:
        print( msg[0].msg.reason)
    except:
        print("No reason")


elif method_packet_parser:
    msg = packet.Packet(data)
    print(msg.__dict__.keys())
    print(msg.protocols)
    print(msg.data)


